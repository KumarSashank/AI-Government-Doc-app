const { Router } = require("express");
const cors = require("cors");
// const jwt = require("jsonwebtoken");
const router = Router();
// const multer = require("multer");
// const fs = require("fs");

// CORS Configuration
const corsConfig = {
  origin: "*", // Allows all origins
  credentials: true,
  methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
  allowedHeaders: ["Content-Type", "Authorization"], // Add any headers you expect
};

router.post("/", async (req, res) => {
  res.send("AI Govt Demo");
});

router.options("/generate-document", cors(corsConfig)); // Handle - preflight for specific route

router.options("/generate-tender-document", cors(corsConfig)); // Handle - preflight for specific route

router.post("/generate-document", async (req, res) => {
  res.set("Access-Control-Allow-Origin", "*"); // Set this in response if still necessary
  const { documentType, fields } = req.body;

  let prompt = "";
  if (documentType === "letter") {
    prompt = generateLetterPrompt(fields);
  } else {
    prompt = generatePrompt(documentType, fields);
  }

  try {
    console.log("API Key:", process.env.OPENAI_API_KEY);

    // Make request to OpenAI API
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer 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`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: prompt }],
        max_tokens: 1000,
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error("Error from OpenAI API:", errorData);
      return res
        .status(response.status)
        .json({ error: "Failed to generate document." });
    }

    const responseData = await response.json();
    res.json({ draft: responseData.choices[0].message.content });
  } catch (error) {
    console.error("Error generating document:", error);
    res.status(500).json({ error: "Failed to generate document." });
  }
});

// Function to generate prompt based on document type and fields
function generatePrompt(documentType, fields) {
  let prompt = "";

  switch (documentType) {
    case "letter":
      prompt = `Generate a letter from ${fields.senderName} to ${fields.recipientName}. Purpose: ${fields.purpose}. Details: ${fields.details}`;
      break;
    case "tender":
      prompt = `Draft a tender document titled ${fields.title}. Scope: ${fields.scope}. Requirements: ${fields.requirements}. Dates: ${fields.dates}.`;
      break;
    case "notice":
      prompt = `Create a public notice titled ${fields.title}. Purpose: ${fields.purpose}. Details: ${fields.details}`;
      break;
    // Add more cases for different document types...
    default:
      prompt = "Generate a document.";
  }
  return prompt;
}

// Letter prompt generation
function generateLetterPrompt(fields) {
  const {
    senderDetails,
    recipientDetails,
    purpose,
    references,
    tone,
    date,
    sampleReference,
  } = fields;

  let prompt = `Write a professional letter with the following details:
    
  From: ${senderDetails}
  To: ${recipientDetails}
  
  Purpose of the Letter: ${purpose}
  
  References: ${references}
  
  Tone of the Letter: ${tone}
  
  Date of the Letter: ${date}
  `;

  if (sampleReference) {
    prompt += `Sample Reference Document: Use this sample as a reference to guide the tone and structure of the letter.`;
  }

  prompt += `
  Please draft the letter in a clear, structured, and ${tone.toLowerCase()} tone. Make sure it addresses the purpose effectively, with any relevant background information provided in the references section.
  And make sure to use all the fields I provided`;

  return prompt;
}

// New endpoint for tender documents
router.post("/generate-tender-document", async (req, res) => {
  res.set("Access-Control-Allow-Origin", "*");
  const { fields } = req.body;

  const prompt = generateTenderPrompt(fields);

  try {
    console.log("API Key:", process.env.OPENAI_API_KEY);

    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: prompt }],
        max_tokens: 1500,
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error("Error from OpenAI API:", errorData);
      return res
        .status(response.status)
        .json({ error: "Failed to generate tender document." });
    }

    const responseData = await response.json();
    res.json({ draft: responseData.choices[0].message.content });
  } catch (error) {
    console.error("Error generating tender document:", error);
    res.status(500).json({ error: "Failed to generate tender document." });
  }
});

// Function to generate prompt based on tender fields
function generateTenderPrompt(fields) {
  const {
    tenderTitle,
    tenderDescription,
    referencePolicies,
    scopeOfWork,
    tenderConditions,
    paymentTerms,
    eligibilityCriterion,
    importantDates,
    winnerEligibility,
    exemptions,
    sampleTender,
  } = fields;

  let prompt = `Draft a comprehensive tender document with the following details:

  Title: ${tenderTitle}

  Description:
  ${tenderDescription}

  Reference Policies:
  ${referencePolicies}

  Scope of Work:
  ${scopeOfWork}

  Tender Conditions:
  ${tenderConditions}

  Payment Terms:
  ${paymentTerms}

  Eligibility Criterion:
  ${eligibilityCriterion}

  Important Dates:
  ${importantDates}

  Tender Winner Eligibility:
  ${winnerEligibility}

  Exemptions:
  ${exemptions}
  `;

  if (sampleTender) {
    prompt += `
    Sample Tender Reference: Include guidance based on this sample tender document to ensure consistency in tone and structure.`;
  }

  prompt += `
  
  Please ensure the document is clear, formal, and includes all the provided fields in a structured format.`;

  return prompt;
}

module.exports = router;
